{"version":3,"sources":["Utils/Converter.js","Components/Converter/BinToDec.js","Components/Converter/DecToBin.js","Components/Subnet/Ip.js","Components/Subnet/IpResults.js","Components/Subnet/Device.js","Components/Subnet/DeviceResults.js","Utils/Subnet.js","App.js","index.js"],"names":["bin_to_dec","bstr","parseInt","replace","dec_to_bin","n","toString","BinToDec","state","input","output","handleChange","event","target","value","match","setState","this","Form","Row","Col","Control","placeholder","onChange","xs","readOnly","React","Component","DecToBin","IpSubnetCalculator","require","Ip","ip","subnet","refIp","createRef","refSubnet","handleIpChange","handleSubnetChange","handleAddTodoClick","preventDefault","addIpSubnet","props","trim","isIp","alert","current","focus","Group","Label","ref","Button","variant","type","onClick","IpResults","ipSubnet","ListGroup","Item","ipLowStr","ipHighStr","ipLowStrUseful","ipHighStrUseful","prefixMaskStr","prefixSize","Device","devices","addDeviceSubnet","DeviceResults","deviceSubnet","ip_subnet_calculator","calculateCIDRPrefix","ipHigherArray","split","ipLowArray","join","device_subnet_calculator","intValue","mask","calc_subnet_prefix","calc_ip_class","calculateSubnetMask","Intl","NumberFormat","format","App","handleIpSubnet","newSubnet","handleDeviceSubnet","Navbar","bg","expand","Brand","href","Container","fluid","lg","Card","style","marginTop","Header","as","Body","Title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3643e0f.chunk.js","sourcesContent":["export const bin_to_dec = function (bstr) { \r\n    return parseInt((bstr + '').replace(/[^01]/gi, ''), 2);\r\n}\r\n\r\nexport const dec_to_bin = function (n) {\r\n    return parseInt(n, 10).toString(2);\r\n}\r\n\r\nexport const dec_to_bin_byte = function (n) {\r\n    \r\n    let bin = parseInt(n, 10).toString(2);\r\n\r\n    while(bin.length < 7 ) bin=\"0\" + bin\r\n\r\n    return bin;\r\n\r\n}","import React from 'react';\r\nimport { Col, Form } from 'react-bootstrap';\r\nimport { bin_to_dec } from '../../Utils/Converter';\r\n\r\nclass BinToDec extends React.Component {\r\n    state = {\r\n        input: '',\r\n        output: ''\r\n    };\r\n\r\n    handleChange = event => {\r\n        const input = event.target.value;\r\n\r\n        if(input.match(\"^[01 ]*$\") !== null) {\r\n            this.setState({ input });\r\n\r\n            if(input !== ''){\r\n                const output = bin_to_dec(input);\r\n\r\n                this.setState({ output });\r\n            } else {\r\n                this.setState({ output: '' });\r\n            }\r\n        }\r\n    };\r\n    \r\n    render(){\r\n\r\n        const { input, output } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col>\r\n                            <Form.Control \r\n                                placeholder=\"Unesite binarni broj\"\r\n                                onChange={this.handleChange}\r\n                                value={input} \r\n                            />\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            =\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control \r\n                                placeholder=\"Rezultat\"\r\n                                value={output} \r\n                                readOnly \r\n                            />\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BinToDec;","import React from 'react';\r\nimport { Col, Form } from 'react-bootstrap';\r\nimport { dec_to_bin } from '../../Utils/Converter';\r\n\r\nclass DecToBin extends React.Component {\r\n    state = {\r\n        input: '',\r\n        output: ''\r\n    };\r\n\r\n    handleChange = event => {\r\n        const input = event.target.value;\r\n\r\n        if(input.match(\"^[0-9 ]*$\") !== null) {\r\n            this.setState({ input });\r\n\r\n            if(input !== ''){\r\n                const output = dec_to_bin(input);\r\n\r\n                this.setState({ output });\r\n            } else {\r\n                this.setState({ output: '' });\r\n            }\r\n        }\r\n    };\r\n    \r\n    render(){\r\n\r\n        const { input, output } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col>\r\n                            <Form.Control \r\n                                placeholder=\"Unesite dekadski broj\"\r\n                                onChange={this.handleChange}\r\n                                value={input} \r\n                            />\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            =\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control \r\n                                placeholder=\"Rezultat\"\r\n                                value={output} \r\n                                readOnly \r\n                            />\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DecToBin;","import React from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\n\r\nconst IpSubnetCalculator = require( 'ip-subnet-calculator' );\r\n\r\n\r\nclass Ip extends React.Component {\r\n    state = {\r\n        ip: '',\r\n        subnet: ''\r\n    };\r\n\r\n    refIp = React.createRef();\r\n    refSubnet = React.createRef();\r\n\r\n    handleIpChange = event => {\r\n        const ip = event.target.value;\r\n\r\n        this.setState({ ip });\r\n\r\n    };\r\n\r\n    handleSubnetChange = event => {\r\n        const subnet = event.target.value;\r\n\r\n        this.setState({ subnet });\r\n\r\n    };\r\n\r\n    handleAddTodoClick = event => {\r\n        event.preventDefault();\r\n        \r\n        const { ip, subnet } = this.state;\r\n        const { addIpSubnet } = this.props;\r\n\r\n        if (!ip || !ip.trim()) return;\r\n        if(!IpSubnetCalculator.isIp( ip )){\r\n            alert('Unesite ispravnu IP adresu');\r\n            this.refIp.current.focus();\r\n            return;\r\n        }\r\n\r\n        if (!subnet || !subnet.trim()) return;\r\n        if(!IpSubnetCalculator.isIp( subnet )){\r\n            alert('Unesite ispravnu Subnet masku');\r\n            this.refSubnet.current.focus();\r\n            return;\r\n        }\r\n\r\n        addIpSubnet({ ip: ip,  subnet: subnet});\r\n\r\n        this.setState({ ip: '',  subnet: ''});\r\n        \r\n    };\r\n    \r\n    render(){\r\n\r\n        const { ip, subnet } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>IP adresa</Form.Label>\r\n                        <Form.Control \r\n                                placeholder=\"Unesite ip adresu (npr. 127.0.0.0)\"\r\n                                onChange={this.handleIpChange}\r\n                                ref={this.refIp}\r\n                                value={ip} \r\n                            />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Subnet maska</Form.Label>\r\n                        <Form.Control \r\n                                placeholder=\"Unesite subnet masku (npr. 255.255.0.0)\"\r\n                                onChange={this.handleSubnetChange}\r\n                                ref={this.refSubnet}\r\n                                value={subnet} \r\n                            />\r\n                    </Form.Group>\r\n                    <Button \r\n                        variant=\"primary\" \r\n                        type=\"submit\"\r\n                        onClick={this.handleAddTodoClick}\r\n                    >\r\n                        Izračunaj\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ip;","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\n\r\nfunction IpResults({ ipSubnet }) {\r\n\r\n  return (\r\n    <ListGroup>\r\n      <ListGroup.Item>IP adresa mreže: <b>{ ipSubnet.ipLowStr }</b></ListGroup.Item>\r\n      <ListGroup.Item>Broadcast adresa: <b>{ ipSubnet.ipHighStr }</b></ListGroup.Item>\r\n      <ListGroup.Item>Prva iskoristiva adresa: <b>{ ipSubnet.ipLowStrUseful }</b></ListGroup.Item>\r\n      <ListGroup.Item>Zadnja iskoristiva adresa: <b>{ ipSubnet.ipHighStrUseful }</b></ListGroup.Item>\r\n      <ListGroup.Item>Subnet maska: <b>{ ipSubnet.prefixMaskStr }</b></ListGroup.Item>\r\n      <ListGroup.Item>Prefiks: <b>{ ipSubnet.prefixSize }</b></ListGroup.Item>\r\n    </ListGroup>\r\n  );\r\n}\r\n\r\nexport default IpResults;","import React from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\n\r\nclass Device extends React.Component {\r\n    state = {\r\n        devices: ''\r\n    };\r\n\r\n    handleChange = event => {\r\n        const devices = event.target.value;\r\n\r\n        if(devices.match(\"^[0-9 ]*$\") !== null) {\r\n            this.setState({ devices });\r\n        }\r\n    };\r\n\r\n    handleAddTodoClick = event => {\r\n        event.preventDefault();\r\n        \r\n        const { devices } = this.state;\r\n        const { addDeviceSubnet } = this.props;\r\n\r\n        if (!devices || !devices.trim()) return;\r\n\r\n        addDeviceSubnet(devices);\r\n\r\n        this.setState({ devices: '' });\r\n        \r\n    };\r\n    \r\n    render(){\r\n\r\n        const { devices } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Broj uređaja</Form.Label>\r\n                        <Form.Control \r\n                                placeholder=\"Unesite broj uređaja\"\r\n                                onChange={this.handleChange}\r\n                                value={devices} \r\n                            />\r\n                    </Form.Group>\r\n                    <Button \r\n                        variant=\"primary\" \r\n                        type=\"submit\"\r\n                        onClick={this.handleAddTodoClick}\r\n                    >\r\n                        Izračunaj\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Device;","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\n\r\nfunction DeviceResults({ deviceSubnet }) {\r\n\r\n  return (\r\n    <ListGroup>\r\n      <ListGroup.Item>Broj uređaja: <b>{ deviceSubnet.devices }</b></ListGroup.Item>\r\n      <ListGroup.Item>IP adresa mreže: <b>{ deviceSubnet.ipLowStr }</b></ListGroup.Item>\r\n      <ListGroup.Item>Subnet maska: <b>{ deviceSubnet.prefixMaskStr }</b></ListGroup.Item>\r\n      <ListGroup.Item>Prefiks: <b>{ deviceSubnet.prefixSize }</b></ListGroup.Item>\r\n    </ListGroup>\r\n  );\r\n}\r\n\r\nexport default DeviceResults;","const IpSubnetCalculator = require( 'ip-subnet-calculator' );\r\n\r\nexport const ip_subnet_calculator = function (value) { \r\n    let subnet = IpSubnetCalculator.calculateCIDRPrefix( value.ip, value.subnet );\r\n\r\n    let ipHigherArray = subnet.ipHighStr.split(\".\");\r\n        ipHigherArray[3] = parseInt(ipHigherArray[3]) - 1;\r\n    let ipLowArray = subnet.ipLowStr.split(\".\");\r\n        ipLowArray[3] = parseInt(ipLowArray[3]) + 1;\r\n    \r\n    subnet['ipHighStrUseful'] = ipHigherArray.join('.');\r\n    subnet['ipLowStrUseful'] = ipLowArray.join('.');\r\n    \r\n    return subnet;\r\n}\r\n\r\nexport const device_subnet_calculator = function (value){\r\n    let intValue = parseInt(value);\r\n    let mask = calc_subnet_prefix(intValue);\r\n    let ip = calc_ip_class(mask);\r\n    let subnet = IpSubnetCalculator.calculateSubnetMask( ip, mask );\r\n\r\n    let ipHigherArray = subnet.ipHighStr.split(\".\");\r\n        ipHigherArray[3] = parseInt(ipHigherArray[3]) - 1;\r\n    let ipLowArray = subnet.ipLowStr.split(\".\");\r\n        ipLowArray[3] = parseInt(ipLowArray[3]) + 1;\r\n    \r\n    subnet['ipHighStrUseful'] = ipHigherArray.join('.');\r\n    subnet['ipLowStrUseful'] = ipLowArray.join('.');\r\n\r\n    subnet['devices'] = new Intl.NumberFormat('de-DE').format(intValue);\r\n\r\n    return subnet;\r\n}\r\nconst calc_ip_class = function(mask){\r\n    //return '172.16.0.0';\r\n    if(mask > 0 && mask <= 8){\r\n        return '10.0.0.0';\r\n    } else if(mask > 8 && mask <= 12){\r\n        return '172.16.0.0';\r\n    } else if(mask > 12){\r\n        return '192.168.0.0';\r\n    }\r\n}\r\nconst calc_subnet_prefix = function(value){\r\n    \r\n    if(value == 2){\r\n        return 30;\r\n    } else if(value > 2 && value <= 6){\r\n        return 29;\r\n    } else if(value > 6 && value <= 14){\r\n        return 28;\r\n    } else if(value > 14 && value <= 30){\r\n        return 27;\r\n    } else if(value > 30 && value <= 62){\r\n        return 26;\r\n    } else if(value > 62 && value <= 126){\r\n        return 25;\r\n    } else if(value > 126 && value <= 254){\r\n        return 24;\r\n    } else if(value > 254 && value <= 510){\r\n        return 23;\r\n    } else if(value > 510 && value <= 1022){\r\n        return 22;\r\n    } else if(value > 1022 && value <= 2046){\r\n        return 21;\r\n    } else if(value > 2046 && value <= 4094){\r\n        return 20;\r\n    } else if(value > 4094 && value <= 8190){\r\n        return 19;\r\n    } else if(value > 8190 && value <= 16382){\r\n        return 18;\r\n    } else if(value > 16382 && value <= 32766){\r\n        return 17;\r\n    } else if(value > 32766 && value <= 65534){\r\n        return 16;\r\n    } else if(value > 65534 && value <= 131070){\r\n        return 15;\r\n    } else if(value > 131070 && value <= 262142){\r\n        return 14;\r\n    } else if(value > 262142 && value <= 524286){\r\n        return 13;\r\n    } else if(value > 524286 && value <= 1048574){\r\n        return 12;\r\n    } else if(value > 1048574 && value <= 2097150){\r\n        return 11;\r\n    } else if(value > 2097150 && value <= 4194302){\r\n        return 10;\r\n    } else if(value > 4194302 && value <= 8388606){\r\n        return 9;\r\n    } else if(value > 8388606 && value <= 16777214){\r\n        return 8;\r\n    } else if(value > 16777214 && value <= 33554430){\r\n        return 7;\r\n    } else if(value > 33554430 && value <= 67108862){\r\n        return 6;\r\n    } else if(value > 67108862 && value <= 268435454){\r\n        return 5;\r\n    } else if(value > 268435454 && value <= 536870910){\r\n        return 4;\r\n    }\r\n\r\n    return null;\r\n}","import React from 'react';\nimport { Card, Col, Container, Navbar, Row } from 'react-bootstrap';\nimport BinToDec from './Components/Converter/BinToDec';\nimport DecToBin from './Components/Converter/DecToBin';\nimport { Ip,  IpResults, Device, DeviceResults} from './Components/Subnet';\nimport { ip_subnet_calculator, device_subnet_calculator } from './Utils/Subnet';\n\nclass App extends React.Component {\n\n  state = {\n    ipSubnet: null,\n    deviceSubnet: null\n  };\n\n  handleIpSubnet = value => {\n    \n    const newSubnet = ip_subnet_calculator( value );\n\n    this.setState({ ipSubnet: newSubnet });\n  };\n\n  handleDeviceSubnet = value => {\n    \n    const newSubnet = device_subnet_calculator( value );\n\n    this.setState({ deviceSubnet: newSubnet });\n  };\n\n  render(){\n\n    const { ipSubnet, deviceSubnet } = this.state;\n\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">URM - Zadaća</Navbar.Brand>\n        </Navbar>\n        <Container fluid>\n          <Row>\n            <Col xs={12} lg={4}>\n              <Card style={{ marginTop: '20px' }}>\n                <Card.Header as=\"h5\">Konvertor</Card.Header>\n                <Card.Body>\n\n                  <Card.Title>Binarni u Dekadski</Card.Title>\n                  <BinToDec />\n\n                </Card.Body>\n\n                <Card.Body>\n\n                  <Card.Title>Dekadski u Binarni</Card.Title>\n                  <DecToBin />\n                  \n                </Card.Body>\n              </Card>\n            </Col>\n\n            <Col xs={12} lg={4}>\n              <Card style={{ marginTop: '20px' }}>\n                <Card.Header as=\"h5\">Subnetiranje - IP adresa &amp; Subnet maska</Card.Header>\n                <Card.Body>\n\n                  <Ip addIpSubnet={this.handleIpSubnet}/>\n\n                </Card.Body>\n                {ipSubnet != null\n                  ? <Card.Body>\n                    \t<Card.Title>Rezultat</Card.Title>\n                        <IpResults ipSubnet={ipSubnet} />\n                    </Card.Body>\n                  : ''\n                }\n                \n              </Card>\n            </Col>\n\n            <Col xs={12} lg={4} >\n              <Card style={{ marginTop: '20px' }}>\n                <Card.Header as=\"h5\">Subnetiranje - broj uređaja</Card.Header>\n                <Card.Body>\n\n                  <Device addDeviceSubnet={this.handleDeviceSubnet} />\n\n                </Card.Body>\n                {deviceSubnet != null\n                  ? <Card.Body>\n                    \t<Card.Title>Rezultat</Card.Title>\n                        <DeviceResults deviceSubnet={deviceSubnet} />\n                    </Card.Body>\n                  : ''\n                }\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}